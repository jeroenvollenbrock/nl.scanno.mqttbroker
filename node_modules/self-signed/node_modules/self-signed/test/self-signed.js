var expect = require('expect.js');
var fs = require('fs');
var exec = require('child_process').execFile;

var temp = require('temp');

var generate = require('..');

temp.track();

describe('self-signed', function() {
  it('should generate a certificate', function() {
    var pems = generate();

    expect(pems).to.only.have.keys('public', 'private', 'cert');
    expect(pems.public).to.be.a('string');
    expect(pems.private).to.be.a('string');
    expect(pems.cert).to.be.a('string');
  });

  it('should generate a protected certificate', function(done) {
    var pems = generate(null, {pkcs7: true});

    expect(pems).to.only.have.keys('public', 'private', 'cert', 'pkcs7');
    expect(pems.public).to.be.a('string');
    expect(pems.private).to.be.a('string');
    expect(pems.cert).to.be.a('string');
    expect(pems.pkcs7).to.be.a('string');

    var path = temp.path({suffix: '.crt'});

    fs.writeFileSync(path, pems.cert);

    // verify pkcs7 encoding is correct
    exec('openssl', ['crl2pkcs7', '-nocrl', '-certfile', path],
      function(err, stdout, stderr) {
      if (err) {
        return done(err);
      }
      expect(stdout.toString().replace(/\n/g, '\r\n')).to.equal(pems.pkcs7);
      done();
    });
  });

  describe('attributes', function() {
    function basic(attr) {
      expect(attr).to.be.an('array');
      expect(attr).to.have.length(6);
      var needs = {
        commonName: true,
        countryName: true,
        stateOrProvinceName: true,
        localityName: true,
        organizationName: true,
        organizationalUnitName: true
      };
      for (var i = 0; i < attr.length; i++) {
        if (needs[attr[i].name]) {
          delete needs[attr[i].name];
        } else {
          expect().fail('unexpected attribute');
        }
      }
      expect(needs).to.eql({});
    }

    it('should have sane defaults', function() {
      var attr = generate.attributes();
      basic(attr);
    });

    it('should incorporate provided data', function() {
      var attr = generate.attributes({
        name: 'example.com',
        city: 'Blacksburg',
        state: 'Virginia',
        organization: 'Test',
        unit: 'Test'
      });
      basic(attr);
      expect(attr).to.eql([{
        name: 'commonName',
        value: 'example.com'
      }, {
        name: 'countryName',
        value: 'US'
      }, {
        name: 'stateOrProvinceName',
        value: 'Virginia'
      }, {
        name: 'localityName',
        value: 'Blacksburg',
      }, {
        name: 'organizationName',
        value: 'Test'
      }, {
        name: 'organizationalUnitName',
        value: 'Test'
      }]);

      attr = generate.attributes({
        name: 'example.org',
        city: 'Portland',
        state: 'Oregon',
        country: 'NOPE',
        organization: 'GlobeSherpa',
        unit: 'Engineering'
      });
      basic(attr);
      expect(attr).to.eql([{
        name: 'commonName',
        value: 'example.org'
      }, {
        name: 'countryName',
        value: 'NOPE'
      }, {
        name: 'stateOrProvinceName',
        value: 'Oregon'
      }, {
        name: 'localityName',
        value: 'Portland',
      }, {
        name: 'organizationName',
        value: 'GlobeSherpa'
      }, {
        name: 'organizationalUnitName',
        value: 'Engineering'
      }]);
    });
  });

  describe('alternates', function() {
    function basic(e, length) {
      expect(e).to.have.length(1);
      expect(e[0]).to.only.have.keys('name', 'altNames');
      expect(e[0].name).to.equal('subjectAltName');
      expect(e[0].altNames).to.have.length(length);
      for (var i = 0; i < length; i++) {
        expect(e[0].altNames[i]).to.be.an('object');
      }
      return e[0].altNames;
    }

    it('should handle falsy values', function() {
      var e = [];
      generate.alternates(null, e);
      expect(e).to.have.length(0);
      generate.alternates(0, e);
      expect(e).to.have.length(0);
      generate.alternates("", e);
      expect(e).to.have.length(0);
      generate.alternates([], e);
      expect(e).to.have.length(0);
    });

    it('should handle an IP address', function() {
      var extensions = [];
      generate.alternates(['127.0.0.1'], extensions);
      var names = basic(extensions, 1);
      expect(names).to.eql([{
        type: 7,
        ip: '127.0.0.1'
      }]);
    });

    it('should handle multiple IP addresses', function() {
      var extensions = [];
      generate.alternates(['127.0.0.1', '8.8.8.8'], extensions);
      var names = basic(extensions, 2);
      expect(names).to.eql([{
        type: 7,
        ip: '127.0.0.1'
      }, {
        type: 7,
        ip: '8.8.8.8'
      }]);
    });

    it('should handle a URI', function() {
      var extensions = [];
      generate.alternates(['http://www.google.com/example#me'], extensions);
      var names = basic(extensions, 1);
      expect(names).to.eql([{
        type: 6,
        value: 'http://www.google.com/example#me'
      }]);
    });

    it('should handle multiple URIs', function() {
      var extensions = [];
      generate.alternates([
        'http://www.google.com/example#me',
        'https://example.com/profile#you'
      ], extensions);
      var names = basic(extensions, 2);
      expect(names).to.eql([{
        type: 6,
        value: 'http://www.google.com/example#me'
      }, {
        type: 6,
        value: 'https://example.com/profile#you'
      }]);
    });

    it('should handle a custom format', function() {
      var extensions = [];
      generate.alternates([
        {type: 5, value: 'hi'}
      ], extensions);
      var names = basic(extensions, 1);
      expect(names).to.eql([
        {type: 5, value: 'hi'}
      ]);
    });

    it('should handle multiple custom formats', function() {
      var extensions = [];
      generate.alternates([
        {type: 5, value: 'hi'},
        {type: 8, value: 'O.o'}
      ], extensions);
      var names = basic(extensions, 2);
      expect(names).to.eql([
        {type: 5, value: 'hi'},
        {type: 8, value: 'O.o'}
      ]);
    });

    it('should handle a combination of formats', function() {
      var extensions = [];
      generate.alternates([
        {type: 5, value: 'hi'},
        'https://example.com/profile#you',
        '8.8.8.8'
      ], extensions);
      var names = basic(extensions, 3);
      expect(names).to.eql([
        {type: 5, value: 'hi'},
        {
          type: 6,
          value: 'https://example.com/profile#you'
        }, {
          type: 7,
          ip: '8.8.8.8'
        }
      ]);
    });
  });

  xdescribe('normalize dates', function() {
    it('should handle Date objects', function() {
      var d = new Date(), s = new Date(0);
      expect(generate.date(d)).to.equal(d);
      expect(generate.date(s)).to.equal(s);
    });

    it('should handle strings', function() {
      var d = '2013-12-16T22:50:37.119Z', s = '1970-01-01T00:00:00.000Z';
      expect(generate.date(d)).to.eql(new Date(d));
      expect(generate.date(s)).to.eql(new Date(s));
    });

    it('should handle numbers', function() {
      // TODO: ewwww
      function attempt(tries) {
        var d = 1000, f = 2 * 365 * 24 * 60 * 60 * 1000;
        var s = Date.now();
        var a = generate.date(d).getTime(), b = generate.date(f).getTime();
        var e = Date.now();
        if (s !== e) {
          expect(tries).to.be.above(0);
          return attempt(tries - 1);
        }
        expect(a).to.equal(s + d);
        expect(b).to.equal(s + f);
      }
      attempt(10);
    });

    it('should handle anything else', function() {
      checkDate();
      checkDate(undefined);
      checkDate(null);
      checkDate(false);
      checkDate({});
      checkDate([]);

      function checkDate() {
        var start = Date.now();
        var mid = generate.date.apply(generate, arguments);
        var end = Date.now();
        expect(start).to.equal(start);
        expect(mid).to.eql(year(start));
      }

      function year(start) {
        var date = new Date(start);
        date.setFullYear(date.getFullYear() + 1);
        return date;
      }
    });
  });
});
