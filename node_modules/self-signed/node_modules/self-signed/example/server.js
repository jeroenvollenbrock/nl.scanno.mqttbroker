var keypair = require('..');

var https = require('https');
var portfinder = require('portfinder'); // you'll need to install this to test

createServer(function(err, server) {
  if (err) {
    throw err;
  }
  var raw = 'hello, world!', body = new Buffer(raw);
  server.on('request', function(req, res) {
    res.writeHead(200, {
      'content-length': body.length,
      'content-type': 'text/plain'
    });
    res.end(body);
  });
  request({
    port: server.port,
    ca: [server.cert]
  }, function(err, data) {
    server.close();
    if (err) {
      throw err;
    }
    console.log('success:', data.toString() === raw);
  });
});

// easy-to-use wrapper
function createServer(callback) {
  var options = keypair({
    name: 'localhost',
    city: 'Blacksburg',
    state: 'Virginia',
    organization: 'Test',
    unit: 'Test'
  }, {
    alt: ['127.0.0.1']
  });

  // server automatically sets up a .cert property
  var server = https.createServer({
    key: options.private,
    cert: options.cert
  });

  portfinder.getPort(function(err, port) {
    if (err) {
      return callback(err);
    }
    server.port = port;
    server.listen(port, 'localhost', function() {
      callback(null, server);
    });
  });

  return server;
}

function request(options, callback) {
  options.hostname = 'localhost';
  options.path = '/';
  var req = https.get(options, function(res) {
    res.on('error', callback);

    var data = [], length = 0;
    res.on('data', function(chunk) {
      data.push(chunk);
      length += chunk.length;
    });
    res.on('end', function() {
      callback(null, Buffer.concat(data, length));
    });
  });
  req.on('error', callback);
}
